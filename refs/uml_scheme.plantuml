@startuml
'note "typedef int t_sock" as N1

struct t_request_line {
std::string method
std::string path
std::string http_version
}

struct t_http_message {
t_request_line \t\t\t\t\trequest_line
std::map<std::string, std::string> \theader_fields
std::vector<char> \t\t\t\tbody
}

struct t_network_address {
in_address_t	address
in_port_t		port
}

abstract class IO {
// Pour les IOs
IO()
+virtual void \t\t\t\tread() = 0
+virtual void \t\t\t\twrite() = 0
+virtual void \t\t\t\tclosed() = 0
}

class ListenSocket {
// Pour les listen_socket
-t_sock \t\t\t\t\tsocket
-t_network_address		netAddr
ListenSocket(t_network_address netAddr)
+virtual void \t\t\t\tread()
+virtual void \t\t\t\twrite()
+virtual void \t\t\t\tclosed()
}

class Connexion {
-t_sock \t\t\t\t\tsocket
-t_network_address		netAddr
-t_http_message\t\t\trequest
-std::string \t\t\t\trequest_header
-bool \t\t\t\t\theader_end
-const Router&	\t\trouter
-Route*\t\t\t\t\troute
' -catch Error:Error413
' -catch Error:Error403
-Ressource*\t\t\t\tressource
Connexion(t_network_address netAddr, t_sock socket, Router& router)
+virtual void \t\t\t\tread()
+virtual void \t\t\t\twrite()
+void \t\t\t\t\tclosed()
-void \t\t\t\t\tread_header()
-bool \t\t\t\t\tread_body()
+void \t\t\t\t\tget_header()
-void \t\t\t\t\tparse_header()
}
note right of Connexion::header_end
returns true when the header is parsed
and no exception is thrown
endnote

class Server {
Server(std::string conFile)
-static std::vector<IO>\t\t\t\tsocks
-static socket\t\t\t\t\t\t\tepollFdSock
-static std::vector<Ressource> \t\tressources
-Router \t\t\t\t\t\t\t\trouter
+void\t\t\t\t\t\t\t\troutine()
+static void\t\t\t\t\t\taddSock(IO sock)
-static void\t\t\t\t\t\taddRessource(Ressource ressource)
+static \t\t\t\t\t\t\trmSock(IO &sock)
}

class Router{
// need to define a lot of functions for the parsing of the .conf file.
// typedef std::map<t_network_address, std::map<std::string, Route>> router_map
Router(Config_file &config)
-router_map 								my_map
+void 									setRoute(Connexion &conn)
-bool 									checkHeader(t_http_message &msg)
+std::vector<t_network_address>			getAddr()

}
note right of Router::set_route
Ne set route que si prerequisites are good
endnote

class Route{
 // typedef char \t\t\t\t\tt_methods
-t_methods \t\\t\t\t\t\tmethods_allowed
-size_t \t\t\t\t\t\t\tmax_body_length
-std::vector<std::string>   \t\t\tserver_names
-std::map<uint,std::string> \t\terrors
-std::string \t\t\t\t\t\tredirect
-std::string \t\t\t\t\t\tstatic_file
-bool \t\t\t\t\t\t\tdirectory_listing

+void \t\t\t\t\t\t\thandle(Connexion &conn)
-Ressource* \t\t\t\t\t\tcreate_ressource(Connexion &conn)
}

Abstract class Ressource{
Ressource(Connexion *conn): fd_read(-1), fd_write(-1)
-int \t\t\t\tfd_read
-int \t\t\t\tfd_write
-Connexion* \t\tconn
-std::vector<char> response
+bool \t\t\tEOF
+virtual void \t\tread() = 0
+virtual void \t\twrite() = 0
+virtual void \t\tclosed() = 0
}

class	CGI{
-int \t\t\t\tfd_read
-int \t\t\t\tfd_write
-Connexion* \t\tconn
-std::vector<char> response
 CGI(Connexion *conn, std::string cgi_path)
+bool \t\t\tEOF
+virtual void \t\tread()
+virtual void \t\twrite()
+virtual void \t\tclosed()
}

class 	GetFile{
-int \t\t\t\tfd_read 
-int \t\t\t\tfd_write = -1
-Connexion* \t\tconn
-std::vector<char> response
 File(Connexion *conn, std::string file_path)
+bool \t\t\tEOF
+virtual void \t\tread()
+virtual void \t\twrite()
+virtual void \t\tclosed()
}
class 	PostFile{
-int \t\t\t\tfd_read = -1
-int \t\t\t\tfd_write
-Connexion* \t\tconn
-std::vector<char> response
 File(Connexion *conn, std::string file_path)
+bool \t\t\tEOF
+virtual void \t\tread()
+virtual void \t\twrite()
+virtual void \t\tclosed()
}
class 	DeleteFile{
-int \t\t\t\tfd_read = -1
-int \t\t\t\tfd_write = -1
-Connexion* \t\tconn
-std::vector<char> response
 File(Connexion *conn, std::string file_path)
+bool \t\t\tEOF
+virtual void \t\tread()
+virtual void \t\twrite()
+virtual void \t\tclosed()
}

class	Directory{
-int \t\t\t\tfd_read = -1
-int \t\t\t\tfd_write = -1
-Connexion* \t\tconn
-std::vector<char> response
 Directory(Connexion *conn, std::string dir_path)
+bool \t\t\tEOF
+virtual void \t\tread()
+virtual void \t\twrite()
+virtual void \t\tclosed()
}

class	Redirect{
-int \t\t\t\tfd_read = -1
-int \t\t\t\tfd_write = -1
-Connexion* \t\tconn
-std::vector<char> response
 Directory(Connexion *conn, std::string redir_path)
+bool \t\t\tEOF
+virtual void \t\tread()
+virtual void \t\twrite()
+virtual void \t\tclosed()
}

class Error{
class Error413: Public std::exception
class Error403: Public std::exception
class Error503: Public std::exception
}
note right of Error::Error413
max body length either doesn't respect
the length allowed in the config or the
route
endnote
note right of Error::Error403
Method not allowed
endnote

ListenSocket --|> IO
Ressource --|> IO
Ressource *--* Connexion
CGI--|> Ressource
GetFile--|> Ressource
PostFile--|> Ressource
DeleteFile--|> Ressource
Directory--|> Ressource
Redirect --|> Ressource
Connexion --|> IO
IO --* Server
Route --* Connexion
t_request_line --* t_http_message
t_http_message --* Connexion
Router --* Server
't_network_address --* Connexion
't_network_address --* ListenSocket
@enduml
